from flask import Flask, render_template, request, redirect, url_for, session, send_file
from dotenv import load_dotenv
from io import BytesIO
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
import os, requests
from datetime import datetime
from reportlab.lib import colors
from reportlab.lib.pagesizes import A4
from reportlab.lib.units import cm
from reportlab.pdfgen import canvas
from io import BytesIO
from flask import send_file
import textwrap

load_dotenv()

app = Flask(__name__)
app.secret_key = os.getenv("SECRET_KEY", "dev-secret")

APP_USER = os.getenv("APP_USER")
APP_PASS = os.getenv("APP_PASS")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

# ---------------------------------
# Fun√ß√µes auxiliares
# ---------------------------------
def get_usuarios():
    """Obt√©m e salva os usu√°rios na sess√£o"""
    try:
        resp = requests.post(WEBHOOK_URL, json={"acao": "usuarios"}, timeout=10)
        if resp.status_code == 200:
            data = resp.json()
            usuarios = []
            for u in data:
                usuarios.append({
                    "id": str(u.get("id")),
                    "nome": (
                        u.get("firt_name") or u.get("first_name") or
                        u.get("username") or f"Usu√°rio {u.get('id')}"
                    ),
                })
            session["usuarios"] = usuarios
            return usuarios
    except Exception as e:
        print("‚ùå Erro ao buscar usu√°rios:", e)
    return []


def get_conversas(user_id=None):
    """Obt√©m conversas do webhook (para um usu√°rio espec√≠fico, se informado)"""
    try:
        payload = {"acao": "conversas"}
        if user_id:
            payload["id"] = user_id  # üîπ agora envia o ID do usu√°rio
        resp = requests.post(WEBHOOK_URL, json=payload, timeout=10)
        return resp.json() if resp.status_code == 200 else []
    except Exception as e:
        print("‚ùå Erro ao buscar conversas:", e)
        return []


# ---------------------------------
# Rotas
# ---------------------------------
@app.route("/", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        user = request.form.get("usuario")
        senha = request.form.get("senha")

        if user == APP_USER and senha == APP_PASS:
            session["user"] = user
            get_usuarios()  # carrega usu√°rios na sess√£o ap√≥s login
            return redirect(url_for("conversas"))
        else:
            return render_template("login.html", erro="Usu√°rio ou senha inv√°lidos.")

    return render_template("login.html")


@app.route("/conversas")
def conversas():
    if "user" not in session:
        return redirect(url_for("login"))

    usuarios = session.get("usuarios") or get_usuarios()
    conversa_id = request.args.get("id")

    conversa = None
    if conversa_id:
        conversas_raw = get_conversas(conversa_id)
        # Filtra mensagens do chat espec√≠fico
        msgs = [m for m in conversas_raw if str(m.get("chat")) == str(conversa_id)]

        usuario = next((u for u in usuarios if str(u["id"]) == str(conversa_id)), None)
        nome = usuario["nome"] if usuario else f"Usu√°rio {conversa_id}"

        conversa = {
            "id": conversa_id,
            "nome": nome,
            "messages": msgs  # üîπ Agora envia a mensagem completa com sender, text, date
        }

    return render_template("conversas.html", conversas=usuarios, conversa=conversa)


@app.route("/exportar_pdf/<conversa_id>")
def exportar_pdf(conversa_id):
    conversas_raw = get_conversas(conversa_id)
    msgs = [m for m in conversas_raw if str(m.get("chat")) == str(conversa_id)]  # üîπ CORRIGIDO: usar 'chat'
    
    usuarios = session.get("usuarios") or []
    usuario = next((u for u in usuarios if str(u["id"]) == str(conversa_id)), None)
    nome = usuario["nome"] if usuario else f"Usu√°rio {conversa_id}"

    buffer = BytesIO()
    pdf = canvas.Canvas(buffer, pagesize=A4)
    largura, altura = A4
    margem = 2 * cm
    y = altura - 2.5 * cm

    # ========== CABE√áALHO JUR√çDICO ==========
    # Logo/T√≠tulo da empresa
    pdf.setFont("Helvetica-Bold", 18)
    pdf.setFillColor(colors.HexColor("#1a1a1a"))
    pdf.drawString(margem, y, "RELAT√ìRIO DE CONVERSA√á√ÉO")
    y -= 25
    
    # Linha decorativa
    pdf.setStrokeColor(colors.HexColor("#FFD500"))
    pdf.setLineWidth(2)
    pdf.line(margem, y, largura - margem, y)
    y -= 30

    # ========== INFORMA√á√ïES DO DOCUMENTO ==========
    pdf.setFont("Helvetica-Bold", 11)
    pdf.setFillColor(colors.black)
    pdf.drawString(margem, y, "DADOS DA CONVERSA")
    y -= 18
    
    pdf.setFont("Helvetica", 10)
    pdf.drawString(margem, y, f"Participante: {nome}")
    y -= 15
    pdf.drawString(margem, y, f"ID da Conversa: {conversa_id}")
    y -= 15
    pdf.drawString(margem, y, f"Data de Exporta√ß√£o: {datetime.now().strftime('%d/%m/%Y √†s %H:%M:%S')}")
    y -= 15
    pdf.drawString(margem, y, f"Total de Mensagens: {len(msgs)}")
    y -= 15
    
    # Per√≠odo da conversa
    if msgs:
        primeira = msgs[0].get("date", "")
        ultima = msgs[-1].get("date", "")
        pdf.drawString(margem, y, f"Per√≠odo: {primeira} at√© {ultima}")
        y -= 20
    
    # Linha separadora
    pdf.setStrokeColor(colors.grey)
    pdf.setLineWidth(1)
    pdf.line(margem, y, largura - margem, y)
    y -= 25

    # ========== HASH/INTEGRIDADE (OPCIONAL MAS RECOMENDADO) ==========
    import hashlib
    conteudo_hash = "".join([m.get("text", "") for m in msgs])
    hash_doc = hashlib.sha256(conteudo_hash.encode()).hexdigest()[:16]
    
    pdf.setFont("Helvetica-Oblique", 8)
    pdf.setFillColor(colors.grey)
    pdf.drawString(margem, y, f"Hash de Integridade: {hash_doc}")
    y -= 25

    # ========== MENSAGENS ==========
    pdf.setFont("Helvetica-Bold", 11)
    pdf.setFillColor(colors.black)
    pdf.drawString(margem, y, "HIST√ìRICO DE MENSAGENS")
    y -= 20

    pdf.setFont("Helvetica", 10)
    msg_count = 1

    for msg in msgs:
        sender_id = str(msg.get("sender"))
        text = msg.get("text", "")
        data = msg.get("date", "")
        
        is_me = sender_id == "8222874193"  # üîπ Seu n√∫mero
        remetente = "Voc√™" if is_me else nome

        # Quebra de linha autom√°tica
        linhas = textwrap.wrap(text, width=80)
        altura_msg = 15 * len(linhas) + 35

        # Quebra de p√°gina se necess√°rio
        if y - altura_msg < 3*cm:
            # Rodap√© da p√°gina
            pdf.setFont("Helvetica-Oblique", 8)
            pdf.setFillColor(colors.grey)
            pdf.drawCentredString(largura/2, 1.5*cm, f"P√°gina {pdf.getPageNumber()}")
            
            pdf.showPage()
            pdf.setFont("Helvetica", 10)
            y = altura - 3*cm

        # Box da mensagem (mais formal)
        pdf.setStrokeColor(colors.HexColor("#e0e0e0"))
        pdf.setLineWidth(0.5)
        pdf.rect(margem, y - altura_msg, largura - 2*margem, altura_msg, stroke=1, fill=0)

        # Cabe√ßalho da mensagem
        pdf.setFont("Helvetica-Bold", 9)
        pdf.setFillColor(colors.HexColor("#1a1a1a"))
        pdf.drawString(margem + 10, y - 15, f"#{msg_count} - {remetente}")
        
        pdf.setFont("Helvetica-Oblique", 8)
        pdf.setFillColor(colors.grey)
        pdf.drawRightString(largura - margem - 10, y - 15, data)

        # Conte√∫do da mensagem
        pdf.setFont("Helvetica", 9)
        pdf.setFillColor(colors.black)
        y_text = y - 30
        for linha in linhas:
            pdf.drawString(margem + 10, y_text, linha)
            y_text -= 14

        y -= altura_msg + 10
        msg_count += 1

    # ========== RODAP√â FINAL ==========
    pdf.setFont("Helvetica-Oblique", 8)
    pdf.setFillColor(colors.grey)
    pdf.drawCentredString(largura/2, 1.5*cm, f"P√°gina {pdf.getPageNumber()}")
    pdf.drawString(margem, 1*cm, "Este documento foi gerado automaticamente pelo sistema.")
    pdf.drawRightString(largura - margem, 1*cm, f"Hash: {hash_doc}")
    
    pdf.save()
    buffer.seek(0)
    
    # Nome do arquivo mais formal
    data_arquivo = datetime.now().strftime('%Y%m%d_%H%M%S')
    return send_file(
        buffer,
        as_attachment=True,
        download_name=f"Relatorio_Conversa_{conversa_id}_{data_arquivo}.pdf",
        mimetype="application/pdf",
    )
    
@app.route("/atualizar_usuarios")
def atualizar_usuarios():
    if "user" not in session:
        return redirect(url_for("login"))
    get_usuarios()  # for√ßa atualiza√ß√£o
    return redirect(url_for("conversas"))


@app.route("/logout")
def logout():
    session.clear()
    return redirect(url_for("login"))


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)
